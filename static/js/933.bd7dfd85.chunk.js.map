{"version":3,"file":"static/js/933.bd7dfd85.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ListMovies/ListMovies.module.css?08bb","components/ListMovies/ListMovies.jsx","webpack://react-homework-template/./src/components/Search/Search.module.css?06df","components/Search/Search.jsx","pages/Movies.js","services/fetch-api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"movie_item\":\"ListMovies_movie_item__2JQt6\"};","\nimport { NavLink } from 'react-router-dom';\nimport { useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport css from './ListMovies.module.css'\n\nexport const ListMovies = ({ movies }) => {\n  const location = useLocation();\n  let url = location.pathname !== '/movies' ? '/movies/' : '';\n  return (\n    <ul>\n      {movies.map(movie => {\n        return (\n          <li key={movie.id} >\n            <NavLink to={`${url}${movie.id}`} state={{ from: location }} className={css.movie_item}>\n              {movie.title}\n            </NavLink>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nListMovies.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    })\n  ),\n};","// extracted by mini-css-extract-plugin\nexport default {\"input\":\"Search_input__PXR0c\",\"button\":\"Search_button__eG3f0\"};","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport css from './Search.module.css'\nexport const Search = ({ onSubmit }) => {\n  const [search, setSearch] = useState('');\n\n  const onInputChange = event => {\n    setSearch(event.currentTarget.value);\n  };\n\n  const onFormSubmit = e => {\n    e.preventDefault();\n    onSubmit(search);\n  };\n\n  return (\n    <form onSubmit={onFormSubmit}>\n          <input\n    className={css.input}\n        type=\"text\"\n        name=\"search\"\n        value={search}\n        autoComplete=\"off\"\n       \n        onChange={onInputChange}\n          />\n          <button type=\"submit\" className={css.button}> \n        Search\n      </button>\n\n      \n    </form>\n  );\n};\n\nSearch.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { ListMovies } from 'components/ListMovies/ListMovies';\nimport { Search } from 'components/Search/Search';\nimport { fetchMoviesQuery } from 'services/fetch-api';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query') ?? '';\n  const onSearchSubmit = query => {\n    setSearchParams({ query });\n  };\n  useEffect(() => {\n    if (query === '') return;\n    fetchMoviesQuery(query).then(setMovies);\n  }, [query]);\n  return (\n    <>\n      <Search onSubmit={onSearchSubmit} />\n      <ListMovies movies={movies} />\n    </>\n  );\n};\n\nexport default Movies;\n","const BASE_URL = 'https://api.themoviedb.org/3/';\nconst KEY = '407c6c5ac7b97eafb7da884568d7dfc2';\n\nexport const fetchTrendMovies = () => {\n  return fetch(`${BASE_URL}trending/movie/day?api_key=${KEY}`)\n    .then(responce => responce.json())\n    .then(data => {\n      const movies = data.results.map(mov => {\n        const movie = {\n          id: mov.id,\n          title: mov.title,\n        };\n        return movie;\n      });\n      return movies;\n    });\n};\n\nexport const fetchMovieWithId = id => {\n  return fetch(`${BASE_URL}movie/${id}?api_key=${KEY}`)\n    .then(responce => responce.json())\n    .then(data => {\n      const movie = {\n        title: data.title,\n        popularity: data.popularity,\n        overview: data.overview,\n        genres: data.genres.flatMap(({ name }) => name).join(', '),\n        poster_path: data.poster_path,\n      };\n      return movie;\n    });\n};\n\nexport const fetchCastMovie = id => {\n  return fetch(`${BASE_URL}movie/${id}/credits?api_key=${KEY}`)\n    .then(responce => responce.json())\n    .then(data => {\n      const actors = data.cast.map(actor => {\n        const actorData = {\n          id: actor.id,\n          name: actor.name,\n          character: actor.character,\n          profile_path: actor.profile_path ? actor.profile_path : '',\n        };\n        return actorData;\n      });\n      return actors;\n    });\n};\n\nexport const fetchReviewsInfo = id => {\n  return fetch(`${BASE_URL}movie/${id}/reviews?api_key=${KEY}`)\n    .then(responce => responce.json())\n    .then(data => {\n      const reviews = data.results.map(review => {\n        const reviewData = {\n          id: review.id,\n          author: review.author,\n          content: review.content,\n        };\n        return reviewData;\n      });\n      return reviews;\n    });\n};\n\nexport const fetchMoviesQuery = query => {\n  return fetch(`${BASE_URL}search/movie?api_key=${KEY}&query=${query}`)\n    .then(responce => responce.json())\n    .then(data => {\n      const movies = data.results.map(mov => {\n        const movie = {\n          id: mov.id,\n          title: mov.title,\n        };\n        return movie;\n      });\n      return movies;\n    });\n};\n"],"names":["ListMovies","movies","location","useLocation","url","pathname","map","movie","to","id","state","from","className","css","title","Search","onSubmit","useState","search","setSearch","e","preventDefault","type","name","value","autoComplete","onChange","event","currentTarget","setMovies","useSearchParams","searchParams","setSearchParams","query","get","useEffect","fetchMoviesQuery","then","BASE_URL","KEY","fetchTrendMovies","fetch","responce","json","data","results","mov","fetchMovieWithId","popularity","overview","genres","flatMap","join","poster_path","fetchCastMovie","cast","actor","character","profile_path","fetchReviewsInfo","review","author","content"],"sourceRoot":""}