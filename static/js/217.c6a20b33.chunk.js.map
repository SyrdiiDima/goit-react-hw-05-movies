{"version":3,"file":"static/js/217.c6a20b33.chunk.js","mappings":"2NAIaA,EAAc,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAC5B,OACE,yBACGA,EAAQC,OAAS,GAChB,wBACGD,EAAQE,KAAI,YAA0B,IAAxBC,EAAuB,EAAvBA,GAAGC,EAAoB,EAApBA,OAAOC,EAAa,EAAbA,QACvB,OACE,2BACE,sCAAcD,MACd,uBAAIC,MAFGF,SAQf,6E,QCJR,EAVgB,WACd,OAA8BG,EAAAA,EAAAA,UAAS,IAAvC,eAAON,EAAP,KAAgBO,EAAhB,KACQJ,GAAOK,EAAAA,EAAAA,MAAPL,GAKR,OAJAM,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAiBP,GAAIQ,KAAKJ,KACzB,CAACJ,KAEG,SAACJ,EAAD,CAAaC,QAASA,M,mJCZ/B,IAAMY,EAAW,gCACXC,EAAM,mCAECC,EAAmB,WAC9B,OAAOC,MAAM,GAAD,OAAIH,EAAJ,sCAA0CC,IACnDF,MAAK,SAAAK,GAAQ,OAAIA,EAASC,UAC1BN,MAAK,SAAAO,GAQJ,OAPeA,EAAKC,QAAQjB,KAAI,SAAAkB,GAK9B,MAJc,CACZjB,GAAIiB,EAAIjB,GACRkB,MAAOD,EAAIC,cAQRC,EAAmB,SAAAnB,GAC9B,OAAOY,MAAM,GAAD,OAAIH,EAAJ,iBAAqBT,EAArB,oBAAmCU,IAC5CF,MAAK,SAAAK,GAAQ,OAAIA,EAASC,UAC1BN,MAAK,SAAAO,GAQJ,MAPc,CACZG,MAAOH,EAAKG,MACZE,WAAYL,EAAKK,WACjBC,SAAUN,EAAKM,SACfC,OAAQP,EAAKO,OAAOC,SAAQ,qBAAGC,QAAiBC,KAAK,MACrDC,YAAaX,EAAKW,iBAMbC,EAAiB,SAAA3B,GAC5B,OAAOY,MAAM,GAAD,OAAIH,EAAJ,iBAAqBT,EAArB,4BAA2CU,IACpDF,MAAK,SAAAK,GAAQ,OAAIA,EAASC,UAC1BN,MAAK,SAAAO,GAUJ,OATeA,EAAKa,KAAK7B,KAAI,SAAA8B,GAO3B,MANkB,CAChB7B,GAAI6B,EAAM7B,GACVwB,KAAMK,EAAML,KACZM,UAAWD,EAAMC,UACjBC,aAAcF,EAAME,aAAeF,EAAME,aAAe,WAQrDxB,EAAmB,SAAAP,GAC9B,OAAOY,MAAM,GAAD,OAAIH,EAAJ,iBAAqBT,EAArB,4BAA2CU,IACpDF,MAAK,SAAAK,GAAQ,OAAIA,EAASC,UAC1BN,MAAK,SAAAO,GASJ,OARgBA,EAAKC,QAAQjB,KAAI,SAAAiC,GAM/B,MALmB,CACjBhC,GAAIgC,EAAOhC,GACXC,OAAQ+B,EAAO/B,OACfC,QAAS8B,EAAO9B,gBAQb+B,EAAmB,SAAAC,GAC9B,OAAOtB,MAAM,GAAD,OAAIH,EAAJ,gCAAoCC,EAApC,kBAAiDwB,IAC1D1B,MAAK,SAAAK,GAAQ,OAAIA,EAASC,UAC1BN,MAAK,SAAAO,GAQJ,OAPeA,EAAKC,QAAQjB,KAAI,SAAAkB,GAK9B,MAJc,CACZjB,GAAIiB,EAAIjB,GACRkB,MAAOD,EAAIC","sources":["components/ReviewsInfo/ReviewsInfo.jsx","pages/Reviews.js","services/fetch-api.js"],"sourcesContent":["\n\nimport PropTypes from 'prop-types';\n\nexport const ReviewsList = ({ reviews }) => {\n  return (\n    <div>\n      {reviews.length > 0 ? (\n        <ul>\n          {reviews.map(({id,author,content}) => {\n            return (\n              <li key={id}>\n                <h2>Auuthor: {author}</h2>\n                <p>{content}</p>\n              </li>\n            );\n          })}\n        </ul>\n      ) : (\n        <p>Sorry we don't have any information about this</p>\n      )}\n    </div>\n  );\n};\n\nReviewsList.propTypes = {\n  reviews: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      author: PropTypes.string.isRequired,\n      content: PropTypes.string.isRequired,\n    })\n  ),\n};","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { ReviewsList } from 'components/ReviewsInfo/ReviewsInfo';\n\nimport { fetchReviewsInfo } from 'services/fetch-api';\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const { id } = useParams();\n  useEffect(() => {\n    fetchReviewsInfo(id).then(setReviews);\n  }, [id]);\n\n  return <ReviewsList reviews={reviews} />;\n};\n\nexport default Reviews;\n","const BASE_URL = 'https://api.themoviedb.org/3/';\nconst KEY = '407c6c5ac7b97eafb7da884568d7dfc2';\n\nexport const fetchTrendMovies = () => {\n  return fetch(`${BASE_URL}trending/movie/day?api_key=${KEY}`)\n    .then(responce => responce.json())\n    .then(data => {\n      const movies = data.results.map(mov => {\n        const movie = {\n          id: mov.id,\n          title: mov.title,\n        };\n        return movie;\n      });\n      return movies;\n    });\n};\n\nexport const fetchMovieWithId = id => {\n  return fetch(`${BASE_URL}movie/${id}?api_key=${KEY}`)\n    .then(responce => responce.json())\n    .then(data => {\n      const movie = {\n        title: data.title,\n        popularity: data.popularity,\n        overview: data.overview,\n        genres: data.genres.flatMap(({ name }) => name).join(', '),\n        poster_path: data.poster_path,\n      };\n      return movie;\n    });\n};\n\nexport const fetchCastMovie = id => {\n  return fetch(`${BASE_URL}movie/${id}/credits?api_key=${KEY}`)\n    .then(responce => responce.json())\n    .then(data => {\n      const actors = data.cast.map(actor => {\n        const actorData = {\n          id: actor.id,\n          name: actor.name,\n          character: actor.character,\n          profile_path: actor.profile_path ? actor.profile_path : '',\n        };\n        return actorData;\n      });\n      return actors;\n    });\n};\n\nexport const fetchReviewsInfo = id => {\n  return fetch(`${BASE_URL}movie/${id}/reviews?api_key=${KEY}`)\n    .then(responce => responce.json())\n    .then(data => {\n      const reviews = data.results.map(review => {\n        const reviewData = {\n          id: review.id,\n          author: review.author,\n          content: review.content,\n        };\n        return reviewData;\n      });\n      return reviews;\n    });\n};\n\nexport const fetchMoviesQuery = query => {\n  return fetch(`${BASE_URL}search/movie?api_key=${KEY}&query=${query}`)\n    .then(responce => responce.json())\n    .then(data => {\n      const movies = data.results.map(mov => {\n        const movie = {\n          id: mov.id,\n          title: mov.title,\n        };\n        return movie;\n      });\n      return movies;\n    });\n};\n"],"names":["ReviewsList","reviews","length","map","id","author","content","useState","setReviews","useParams","useEffect","fetchReviewsInfo","then","BASE_URL","KEY","fetchTrendMovies","fetch","responce","json","data","results","mov","title","fetchMovieWithId","popularity","overview","genres","flatMap","name","join","poster_path","fetchCastMovie","cast","actor","character","profile_path","review","fetchMoviesQuery","query"],"sourceRoot":""}