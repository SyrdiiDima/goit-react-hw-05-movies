{"version":3,"file":"static/js/448.8dd5a8ec.chunk.js","mappings":"gMACA,GAAgB,KAAO,wB,SCGVA,EAAW,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACzB,OACE,wBACGA,EAAMC,KAAI,SAAAC,GACT,IAAMC,EAAG,yCAAqCD,EAAKE,cACnD,OAEE,gBAAkBC,UAAWC,EAAAA,KAA7B,UACGJ,EAAKE,cACF,gBAAKG,IAAKJ,EAAKK,IAAKN,EAAKO,KAAMJ,UAAWC,EAAAA,SAE5C,uBAAIJ,EAAKO,QAGX,wBAAMP,EAAKO,QAEX,uCAAeP,EAAKQ,cACpB,oBAVOR,EAAKS,U,0BCIxB,EAVa,WACX,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACQH,GAAOI,EAAAA,EAAAA,MAAPJ,GAKR,OAJAK,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAeN,GAAIO,KAAKJ,KACvB,CAACH,KAEG,SAACZ,EAAD,CAAUC,MAAOa,M,mJCZ1B,IAAMM,EAAW,gCACXC,EAAM,mCAECC,EAAmB,WAC9B,OAAOC,MAAM,GAAD,OAAIH,EAAJ,sCAA0CC,IACnDF,MAAK,SAAAK,GAAQ,OAAIA,EAASC,UAC1BN,MAAK,SAAAO,GAQJ,OAPeA,EAAKC,QAAQzB,KAAI,SAAA0B,GAK9B,MAJc,CACZhB,GAAIgB,EAAIhB,GACRiB,MAAOD,EAAIC,cAQRC,EAAmB,SAAAlB,GAC9B,OAAOW,MAAM,GAAD,OAAIH,EAAJ,iBAAqBR,EAArB,oBAAmCS,IAC5CF,MAAK,SAAAK,GAAQ,OAAIA,EAASC,UAC1BN,MAAK,SAAAO,GAQJ,MAPc,CACZG,MAAOH,EAAKG,MACZE,WAAYL,EAAKK,WACjBC,SAAUN,EAAKM,SACfC,OAAQP,EAAKO,OAAOC,SAAQ,qBAAGxB,QAAiByB,KAAK,MACrDC,YAAaV,EAAKU,iBAMblB,EAAiB,SAAAN,GAC5B,OAAOW,MAAM,GAAD,OAAIH,EAAJ,iBAAqBR,EAArB,4BAA2CS,IACpDF,MAAK,SAAAK,GAAQ,OAAIA,EAASC,UAC1BN,MAAK,SAAAO,GAUJ,OATeA,EAAKZ,KAAKZ,KAAI,SAAAmC,GAO3B,MANkB,CAChBzB,GAAIyB,EAAMzB,GACVF,KAAM2B,EAAM3B,KACZC,UAAW0B,EAAM1B,UACjBN,aAAcgC,EAAMhC,aAAegC,EAAMhC,aAAe,WAQrDiC,EAAmB,SAAA1B,GAC9B,OAAOW,MAAM,GAAD,OAAIH,EAAJ,iBAAqBR,EAArB,4BAA2CS,IACpDF,MAAK,SAAAK,GAAQ,OAAIA,EAASC,UAC1BN,MAAK,SAAAO,GASJ,OARgBA,EAAKC,QAAQzB,KAAI,SAAAqC,GAM/B,MALmB,CACjB3B,GAAI2B,EAAO3B,GACX4B,OAAQD,EAAOC,OACfC,QAASF,EAAOE,gBAQbC,EAAmB,SAAAC,GAC9B,OAAOpB,MAAM,GAAD,OAAIH,EAAJ,gCAAoCC,EAApC,kBAAiDsB,IAC1DxB,MAAK,SAAAK,GAAQ,OAAIA,EAASC,UAC1BN,MAAK,SAAAO,GAQJ,OAPeA,EAAKC,QAAQzB,KAAI,SAAA0B,GAK9B,MAJc,CACZhB,GAAIgB,EAAIhB,GACRiB,MAAOD,EAAIC","sources":["webpack://react-homework-template/./src/components/CastInfo/CastInfo.module.css?0a17","components/CastInfo/CastInfo.jsx","pages/Cast.js","services/fetch-api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"item\":\"CastInfo_item__E00bZ\"};","\n\nimport PropTypes from 'prop-types';\nimport css from './CastInfo.module.css'\nexport const CastInfo = ({ casts }) => {\n  return (\n    <ul>\n      {casts.map(item => {\n        const url = `https://image.tmdb.org/t/p/w200${item.profile_path}`;\n        return (\n        \n          <li key={item.id} className={css.item}>\n            {item.profile_path ? (\n                <img src={url} alt={item.name} className={css.image}/>\n            ) : (\n              <p>{item.name}</p>\n            )}\n\n            <h2 >{item.name}</h2>\n            \n            <p>Character: {item.character}</p>\n            <hr />\n            </li>\n          \n          \n        );\n      })}\n    </ul>\n  );\n};\n\nCastInfo.propTypes = {\n  casts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      name: PropTypes.string.isRequired,\n      character: PropTypes.string.isRequired,\n      profile_path: PropTypes.string.isRequired,\n    })\n  ),\n};","import { CastInfo } from 'components/CastInfo/CastInfo';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchCastMovie } from 'services/fetch-api';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const { id } = useParams();\n  useEffect(() => {\n    fetchCastMovie(id).then(setCast);\n  }, [id]);\n\n  return <CastInfo casts={cast} />;\n};\n\nexport default Cast;\n","const BASE_URL = 'https://api.themoviedb.org/3/';\nconst KEY = '407c6c5ac7b97eafb7da884568d7dfc2';\n\nexport const fetchTrendMovies = () => {\n  return fetch(`${BASE_URL}trending/movie/day?api_key=${KEY}`)\n    .then(responce => responce.json())\n    .then(data => {\n      const movies = data.results.map(mov => {\n        const movie = {\n          id: mov.id,\n          title: mov.title,\n        };\n        return movie;\n      });\n      return movies;\n    });\n};\n\nexport const fetchMovieWithId = id => {\n  return fetch(`${BASE_URL}movie/${id}?api_key=${KEY}`)\n    .then(responce => responce.json())\n    .then(data => {\n      const movie = {\n        title: data.title,\n        popularity: data.popularity,\n        overview: data.overview,\n        genres: data.genres.flatMap(({ name }) => name).join(', '),\n        poster_path: data.poster_path,\n      };\n      return movie;\n    });\n};\n\nexport const fetchCastMovie = id => {\n  return fetch(`${BASE_URL}movie/${id}/credits?api_key=${KEY}`)\n    .then(responce => responce.json())\n    .then(data => {\n      const actors = data.cast.map(actor => {\n        const actorData = {\n          id: actor.id,\n          name: actor.name,\n          character: actor.character,\n          profile_path: actor.profile_path ? actor.profile_path : '',\n        };\n        return actorData;\n      });\n      return actors;\n    });\n};\n\nexport const fetchReviewsInfo = id => {\n  return fetch(`${BASE_URL}movie/${id}/reviews?api_key=${KEY}`)\n    .then(responce => responce.json())\n    .then(data => {\n      const reviews = data.results.map(review => {\n        const reviewData = {\n          id: review.id,\n          author: review.author,\n          content: review.content,\n        };\n        return reviewData;\n      });\n      return reviews;\n    });\n};\n\nexport const fetchMoviesQuery = query => {\n  return fetch(`${BASE_URL}search/movie?api_key=${KEY}&query=${query}`)\n    .then(responce => responce.json())\n    .then(data => {\n      const movies = data.results.map(mov => {\n        const movie = {\n          id: mov.id,\n          title: mov.title,\n        };\n        return movie;\n      });\n      return movies;\n    });\n};\n"],"names":["CastInfo","casts","map","item","url","profile_path","className","css","src","alt","name","character","id","useState","cast","setCast","useParams","useEffect","fetchCastMovie","then","BASE_URL","KEY","fetchTrendMovies","fetch","responce","json","data","results","mov","title","fetchMovieWithId","popularity","overview","genres","flatMap","join","poster_path","actor","fetchReviewsInfo","review","author","content","fetchMoviesQuery","query"],"sourceRoot":""}